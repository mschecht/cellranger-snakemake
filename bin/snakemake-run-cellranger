#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Snakemake Cell Ranger ARC Workflow Runner
Command-line interface for running Cell Ranger Snakemake workflows.
"""

import sys
import argparse

from pathlib import Path

from __init__ import (
    logger,
    sanity_check,
    write_default_config,
    run_snakemake,
)

__version__ = "1.0.0"
__description__ = "Snakemake wrapper for Cell Ranger ARC workflows"


def main():
    # Validate early
    sanity_check(args)

    # Dispatch logic
    if args.get_default_config is not False:
        # args.get_default_config is True or filename string or None
        filename = None if args.get_default_config is True else args.get_default_config
        write_default_config(args.workflow, filename)
    elif args.run:
        run_snakemake(
            config_file=args.config_file,
            snakefile=args.snakefile,
            dry_run=False,
            cores=args.cores,
            additional_args=args.additional_params
            )
    elif args.dry_run:
        run_snakemake(
            config_file=args.config_file,
            snakefile=args.snakefile,
            dry_run=True,
            cores=args.cores,
            additional_args=args.additional_params
            )
    else:
        logger.error("No action specified.")
        sys.exit(1)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description=__description__,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Print default config to stdout
  snakemake-run-cellranger.py --workflow ARC --get-default-config
  
  # Run workflow (dry run)
  snakemake-run-cellranger.py --workflow ARC --dry-run
  
  # Run workflow with 4 cores
  snakemake-run-cellranger.py --workflow ARC --run --cores 4
  
  # Run with custom config file
  snakemake-run-cellranger.py --workflow ARC --run --config-file my_config.yaml
        """
    )

    parser.add_argument("--version", action="version", version=f"%(prog)s {__version__}")

    parser.add_argument(
        "--workflow",
        required=True,
        choices=["ARC", "ATAC", "GEX"],
        help="Select which Cell Ranger workflow to use."
    )

    # Mutually exclusive action
    action_group = parser.add_mutually_exclusive_group(required=True)
    action_group.add_argument("--get-default-config",
                            dest="get_default_config",
                            action="store",
                            nargs="?",
                            const=True,
                            default=False,
                            metavar="FILE",
                            help="Print default configuration YAML to stdout or save to FILE if provided")
    action_group.add_argument(
        "--create-default-files",
        action="store_true",
        help="Create default Snakefile and config.yaml"
    )
    action_group.add_argument(
        "--run",
        action="store_true",
        help="Run the Snakemake workflow"
    )
    action_group.add_argument(
        "--dry-run",
        action="store_true",
        help="Dry run the workflow"
    )

    # Optional extras
    parser.add_argument("--config-file", default="config.yaml", help="Config file (default: config.yaml)")
    parser.add_argument("--snakefile", default="Snakefile", help="Snakefile to use (default: Snakefile)")
    parser.add_argument("--cores", type=int, help="Number of CPU cores to use")
    parser.add_argument("--output-dir", default=".", help="Output dir for default files")
    parser.add_argument("--additional-params", default="", help="Extra Snakemake args")

    args = parser.parse_args()

    try:
        main(args)
    except KeyboardInterrupt:
        print("\nOperation cancelled by user.")
        sys.exit(1)
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        sys.exit(1)